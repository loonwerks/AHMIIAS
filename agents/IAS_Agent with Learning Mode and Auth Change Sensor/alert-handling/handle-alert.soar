##!
# @file
#
# @created rjones 20210121

echo "\nLoading handle-alert.soar"

#############
### Create structures to keep information about each type of error
#sp {top-state*elaborate*error-info
#    (state <s> ^superstate nil)
#-->
#    (<s> ^error-info <gi> <gl> <li>)
#    (<gi> ^error gps)
#    (<gl> ^error lidar)
#    (<li> ^error imu)

#    }

### Copy current error values from input to the error-info structures
sp {top-state*elaborate*error-info*current-value*gps
    (state <s> ^io.input-link.flightdata.gps-error <v>)
    (<s> ^gps-error-info <ei>)
-->
    (<ei> ^current-value <v>)
    }

sp {top-state*elaborate*error-info*current-value*lidar
    (state <s> ^io.input-link.flightdata.lidar-error <v>
               ^lidar-error-info <ei>)
-->
    (<ei> ^current-value <v>)
    }

sp {top-state*elaborate*error-info*current-value*imu
    (state <s> ^io.input-link.flightdata.imu-error <v>
               ^imu-error-info <ei>)
-->
    (<ei> ^current-value <v>)
    }


sp {top-state*elaborate*user-response*agree
    (state <s> ^io.input-link.flightdata.pilot-decision yes)
-->
    (<s> ^user-response yes)
    }
sp {top-state*elaborate*user-response*disagree
    (state <s> ^io.input-link.flightdata.pilot-decision no)
-->
    (<s> ^user-response no)
    }
#####################
### Parameter values for the various warning conditions
### Possible warn-condition values are normal, low, high, and safety
### We never alert in a normal condition, always alert in a safety condition
### and learn whether to alert in low or high conditions

sp {top-state*elaborate*safety-error
    (state <s> ^superstate nil)
-->
    (<s> ^safety-error 10.0)
    }

sp {top-state*elaborate*high-low-warn-error
    (state <s> ^superstate nil)
-->
    (<s> ^high-low-warn-error 9.0)
    }

sp {top-state*elaborate*normal-error
    (state <s> ^superstate nil)
-->
    (<s> ^normal-error 8.0)
    }

##########################
### Detect safety condition for a sensor
proc generateSafetyWarnCondition { types } {
   foreach type $types {
      sp "top-state*elaborate*error-info*warn-condition*safety*${type}
              (state <s> ^flight-mode horizontal
                         ^safety-error <v>
                         ^${type}-error-info <ei>)
              (<ei> ^current-value >= <v>)
            -->
              (<ei> ^warn-condition safety)
            "
   }
}

generateSafetyWarnCondition { gps imu lidar }

##########################
### Detect high warn-condition for a sensor
proc generateHighWarnCondition { types } {
   foreach type $types {
      sp "top-state*elaborate*error-info*warn-condition*high*${type}
              (state <s> ^flight-mode horizontal
                         ^high-low-warn-error <hv>
                          ^safety-error <sv>
                         ^${type}-error-info <ei>)
              (<ei> ^current-value >= <hv>)
              (<ei> ^current-value < <sv>)
	      #(<ei> -^warn-condition safety)
            -->
              (<ei> ^warn-condition high)
            "
   }
}
generateHighWarnCondition { gps imu lidar }

##########################
### Detect low warn-condition for a sensor
proc generateLowWarnCondition { types } {
   foreach type $types {
      sp "top-state*elaborate*error-info*warn-condition*low*${type}
              (state <s> ^flight-mode horizontal
                         ^normal-error <nv>
                         ^high-low-warn-error <hv>
                         ^${type}-error-info <ei>)
              (<ei> ^current-value >= <nv>)
              (<ei> ^current-value < <hv>)


	      #(<ei> -^warn-condition safety)
	      #(<ei> -^warn-condition high)
            -->
              (<ei> ^warn-condition low)
            "
   }
}
generateLowWarnCondition { gps imu lidar }

proc generateDisplayWarnCondition { types } {
   foreach type $types {
      sp "top-state*elaborate*error-info*warn-condition*display*${type}
            (state <s> ^flight-mode horizontal
                    ^${type}-error-info <ei>)
            (<ei> ^warn-condition <wc>)
            -->
            (write (crlf) |Warn-Condition is | <wc>)
            "
   }
}
#generateDisplayWarnCondition { gps imu lidar }


######################
### Detect normal condition if none of the other conditions apply

proc generateNormalWarnCondition { types } {
   foreach type $types {
      sp "top-state*elaborate*error-info*warn-condition*normal*${type}
              (state <s> ^flight-mode horizontal
                        ^normal-error <nv>
                         ^${type}-error-info <ei>)
	      #(<ei> -^warn-condition safety)
	      #(<ei> -^warn-condition high)
	      #(<ei> -^warn-condition low)
          (<ei> ^current-value < <nv>)
            -->
              (<ei> ^warn-condition normal)
            "
   }
}

generateNormalWarnCondition { gps imu lidar }

########################
### Any time one of the error values changes, record the change and set the ^error-changed flag
### This flag will tell us that we have to decide whether to warn the user

proc generateRecordChangedErrorPropose { types } {
   foreach type $types {
      sp "record-changed-error*propose*${type}
              (state <s> ^${type}-error-info <ei>)
	      (<ei> ^current-value <v>)
	      (<ei> -^old-value <v>)
	      (<ei> -^value-changed true)
            -->
          (<s> ^operator <o> + =)
	      (<o> ^name record-changed-error-${type} )
              (write (crlf) |${type} current-value | <v> )
            "
   }
}
generateRecordChangedErrorPropose { gps imu lidar }


############################
### If the ^error-changed flag is set, then we need to (re-)decide whether to issue a warning.
### when we issue the warning, we also remove the ^error-changed  flag so we do not issue
### another warning until the error value changes again

### To start, always propose the warn and do-not-warn operators
### The warn operator will issue a warning and then we will wait for the user to
### accept (or not) the warning
### and then we will remove the ^error-changed  flag
###
### The do-not-warn operator will simply remove the flag

### The ^warning-issued value allows us to wait for the user response, and it will also prevent
### us from issuing more than one warning at a time

proc generateDecisionPropose { types } {
   foreach type $types {
      sp "decision*propose*${type}
              (state <s> ^${type}-error-info <ei>)
	      (<s> -^warning-issued)
	      (<ei> ^value-changed true)
	      (<ei> ^warn-condition <wc> <> normal)
          (<s> -^ready-to-decide)
            -->
        (<s> ^operator <o> + =)
	      (<o> ^name decision)
          (write (crlf) |proposed decision with warn-condition: | <wc>)
            "
   }
}

generateDecisionPropose { gps imu lidar }

sp {warn*propose
    (state <s> ^ready-to-decide yes)
-->
    (<s> ^operator <o> +,=,=)
    (<o> ^name warn)
    (write (crlf) |proposed warn in handle-alert|)
}

sp {do-not-warn*propose
    (state <s> ^ready-to-decide yes)
-->
    (<s> ^operator <o> +,=,=)
    (<o> ^name do-not-warn)
    (write (crlf) |proposed do-not-warn in handle-alert|)
}


####################
### Record user's response to a warning

proc generateRecordUserResponsePropose { types } {
   foreach type $types {
      sp "propose*record-user-response*${type}
              (state <s> ^${type}-error-info <ei>)
	      (<s> ^flight-mode horizontal)
	      (<s> ^warning-issued ${type})
	      (<s> ^user-response <x> <> none)
	      (<ei> -^warning-accepted)
            -->
          (<s> ^operator <o> + >,=)
	      (<o> ^name record-user-response)
	      (write (crlf) |Pilot response: | <x>)
            "
   }
}

generateRecordUserResponsePropose { gps imu lidar }
