MODULE main
VAR count_from-Start: {nil, one,two,three,four,five};
VAR count_from-Count:{nil, one,two,three,four,five};
VAR count_from-End:{nil, one,two,three,four,five};
VAR number-Number:{nil,one,two,three,four,five};
VAR number-Next:{nil, one,two,three,four,five};
VAR goal: {yes, no};
VAR num1: {nil,one,two,three,four,five};
VAR num2: {nil,one,two,three,four,five};
VAR num: {nil,one,two,three,four,five};

ASSIGN
 init(count_from-Start) := two;
 init(count_from-Count) := nil;
 init(count_from-End) := four;
 init(number-Number) := nil;
 init(number-Next) := nil;
 init(goal):= no;
 init(num1) := nil;
 init(num2) := nil;
 init(num) := nil;

VAR InputTemplate: CounterInput(num1, num2, num, goal,count_from-Count,count_from-Start,count_from-End, number-Number,number-Next); 
VAR ACTR: counter(num1, num2, num, goal,count_from-Count,count_from-Start,count_from-End, number-Number,number-Next);

-----------------------------------------------
--LTLSPECS
LTLSPEC F (goal = no U num = five)
--LTLSPEC F (goal = no U num2= three)
--LTLSPEC F (num1 = two U num= five)
-- LTLSPEC F (Y num1 = three -> num2 = five) ---not proved
--LTLSPEC F (X num1 = two -> num2 = one )
--LTLSPEC F (X num1 = three & X num2 = four)
--LTLSPEC F ( O num = one)
--LTLSPEC F (X num1 = two & X num2 = one)
--LTLSPEC F (Y num2 = three)
--LTLSPEC G (Y num2 = three)
--LTLSPEC F (Y num2 = three)
--LTLSPEC G F (num1=three)
--LTLSPEC F (X num2 = three)
--LTLSPEC F (num1 = five)
--------------------------------------------
MODULE CounterInput(num1, num2, num, goal,count_from-Count,count_from-Start,count_from-End, number-Number,number-Next)
    TRANS
        next(count_from-Start)=
        case
        (count_from-Start = nil): two;
        (count_from-Start != nil): two;
        TRUE: count_from-Start;
        esac;
    TRANS
        next(count_from-End)=
        case
        (count_from-End = nil): four;   
        (count_from-End !=nil ): four;
        TRUE: count_from-End;
        esac;

    TRANS 
        next(num1)=
        case
        (num1 = nil): count_from-Start;
        (goal = no & count_from-Count= num1 & number-Next=num2): num2;
        TRUE: num1;
        esac;

    TRANS
        next(num2)= 
        case
        (num2 = nil): count_from-Count;
        (goal = no & count_from-Count=two): three;
        (goal = no & count_from-Count=three): four;
        (goal = no & count_from-Count=four): five;
        TRUE: num2;
        esac;

    TRANS 
        next (num)=
        case 
        (num = nil): count_from-End;
        (goal = no & count_from-Start= num2 & count_from-Count= num2 & num2 != nil): num;
        TRUE: num;
        esac;


MODULE counter(num1, num2, num, goal,count_from-Count,count_from-Start,count_from-End, number-Number,number-Next)

    

    TRANS 
        next(count_from-Count)=
        case 
            (goal = no & count_from-Start = num1 & count_from-Count = nil): num1;
            (goal = no & count_from-Count = num1 & count_from-End != num1 & number-Number = num1 & number-Next = num2): num2;
            
        TRUE : count_from-Count; 
        esac;


    TRANS 
        next(number-Number) = 
        case
            (count_from-Start= num1 & count_from-Count = nil): num1;
            (count_from-Count = num1 & count_from-End !=num & number-Number = num1 & number-Next=num2): num2;

        TRUE : number-Number;
        esac; 

    TRANS
        next(goal)=
        case
        (count_from-Count=num & count_from-End=num & number-Number=num & num !=nil): yes;
        TRUE: goal;
        esac;



  
    